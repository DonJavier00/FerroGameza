<?php

namespace App\Models;

use JetBrains\PhpStorm\Internal\TentativeType;
use App\Interfaces\Model;
use Carbon\Carbon;
use Exception;
use JsonSerializable;
class facturacompra extends AbstractDBConnection implements \App\Interfaces\Model
{

    private ?int $id;
    private carbon $fecha;
    private string $monto;
    private int $proveedor_id;
    private string $estado;

    //relaciones
    private ?array $DetalleCompraFacturaCompra;
    private Persona $proveedor;



    /**
     * @param int|null $id
     * @param Carbon $fecha
     * @param string $monto
     * @param int $proveedor_id
     * @param string $estado
     */
    public function __construct(array $FacturaCompra=[])
    {
        parent::__construct();
       $this->setId ($FacturaCompra['id'] ?? NULL);
       $this->setFecha(!empty($FacturaCompra['fecha'])?
           carbon::parse($FacturaCompra['fecha']) : new carbon());
       $this->setMonto ($FacturaCompra ['monto'] ?? '');
       $this ->setProveedorId($FacturaCompra ['proveedor_id'] ?? 0);
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    /**
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }

    /**
     * @param int|null $id
     */
    public function setId(?int $id): void
    {
        $this->id = $id;
    }

    /**
     * @return Carbon
     */
    public function getFecha(): Carbon
    {
        return $this->fecha;
    }

    /**
     * @param Carbon $fecha
     */
    public function setFecha(Carbon $fecha): void
    {
        $this->fecha = $fecha;
    }

    /**
     * @return string
     */
    public function getMonto(): string
    {
        return $this->monto;
    }

    /**
     * @param string $monto
     */
    public function setMonto(string $monto): void
    {
        $total = 0;
        if($this->getId() != null){
            $arrFacturaCompra = $this->getDetalleCompraFacturaCompra();
            if(!empty($arrFacturaCompraCompra)){
                /* @var $arrFacturaCompra facturacompra[] */
                foreach ($arrFacturaCompra as $DetalleCompra){
                    $total += $DetalleCompra->getTotalProducto();
                }
            }
        }
        $this->monto = $total;
    }

    /**
     * @return int
     */
    public function getProveedorId(): int
    {
        return $this->proveedor_id;
    }

    /**
     * @param int $proveedor_id
     */
    public function setProveedorId(int $proveedor_id): void
    {
        $this->proveedor_id = $proveedor_id;
    }

    /**
     * @return string
     */
    public function getEstado(): string
    {
        return $this->estado;
    }

    /**
     * @param string $estado
     */
    public function setEstado(string $estado): void
    {
        $this->estado = $estado;
    }

    /* Relaciones */

    /**
     * @return array|null
     */
    public function getDetalleCompraFacturaCompra(): ?array
    {

        $this->DetalleCompraFacturaCompra = detallecompra::search('SELECT * FROM ferreteria.detallecompra where compra_id = '.$this->id);
        return $this->detalleCompra;
    }

    /**
     * @return Persona
     */
    public function getProveedor(): Persona
    {
        if(!empty($this->proveedor_id)){
            $this->proveedor = Persona::searchForId($this->proveedor_id) ??new Persona();
            return $this->proveedor;
        }
        return null;//porquÃ©
    }


    protected function save(string $query): ?bool
    {
        $arrData = [
            ':id' =>    $this->getId(),
            ':fecha' =>   $this->getFecha() ->ToDateTimeString(),
            ':monto' =>   $this->getMonto(),
            ':proveedor_id' =>   $this->getProveedorId(),
            ':estado' =>  $this->getEstado()
        ];
        $this->Connect();
        $result = $this->insertRow($query, $arrData);
        $this->Disconnect();
        return $result;
    }

    function insert(): ?bool
    {
        $query = "INSERT INTO ferreteria.facturacompra VALUES (:id,:fecha,:monto,:proveedor_id,:estado)";
        return $this->save($query);
    }
    function update(): ?bool
    {
        $query = "UPDATE ferreteria.facturacompra SET 
            fecha = :fecha, monto = :monto, 
            proveedor_id = :proveedor_id,  estado = :estado WHERE id = :id";
        return $this->save($query);
    }

    function deleted(): ?bool
    {
        $this->setEstado("Inactivo"); //Cambia el estado del Usuario
        return $this->update();
    }

    static function search($query): ?array
    {
        try {
            $arrFacturaCompra = array();
            $tmp = new facturacompra();
            $tmp->Connect();
            $getrows = $tmp->getRows($query);
            $tmp->Disconnect();

            foreach ($getrows as $valor) {
                $Compra = new facturacompra($valor);
                array_push($arrFacturaCompra, $Compra);
                unset($Compra);
            }
            return $arrFacturaCompra;
        } catch (Exception $e) {
            GeneralFunctions::logFile('Exception',$e, 'error');
        }
        return NULL;
    }

    static function searchForId(int $id): ?object
    {
        try {
            if ($id > 0) {
                $Compra = new facturacompra();
                $Compra->Connect();
                $getrow = $Compra->getRow("SELECT * FROM ferreteria.facturacompra WHERE id =?", array($id));
                $Compra->Disconnect();
                return ($getrow) ? new facturacompra($getrow) : null;
            }else{
                throw new Exception('Id de compra Invalido');
            }
        } catch (Exception $e) {
            GeneralFunctions::logFile('Exception',$e, 'error');
        }
        return NULL;
    }

    static function getAll(): ?array
    {
        return facturacompra::search("SELECT * FROM ferreteria.facturacompra");
    }

    public function __toString() : string
    {
        return "
        Cliente: ".$this->getProveedor().",
        Fecha Venta: $this->fecha_compra->toDateTimeString(), 
        Monto: $this->monto, 
        Estado: $this->estado";
    }


    /**
     * @inheritDoc
     */
    public function jsonSerialize(): mixed
    {
        return [
            'fecha' =>  $this->getFecha()->toDateTimeString(),
            'monto'=> $this ->getMonto(),
            'proveedor'=> $this->getProveedor()->jsonSerialize(),
            'estado'=>$this->getEstado()
        ];


    }
}