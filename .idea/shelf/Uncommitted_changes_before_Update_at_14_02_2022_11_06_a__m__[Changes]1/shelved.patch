Index: app/Models/facturacompra.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse JetBrains\\PhpStorm\\Internal\\TentativeType;\r\nuse App\\Interfaces\\Model;\r\nuse Carbon\\Carbon;\r\nuse Exception;\r\nuse JsonSerializable;\r\nclass facturacompra extends AbstractDBConnection implements \\App\\Interfaces\\Model\r\n{\r\n\r\n    private ?int $id;\r\n    private carbon $fecha;\r\n    private string $monto;\r\n    private int $proveedor_id;\r\n    private string $estado;\r\n\r\n    //relaciones\r\n    private ?array $DetalleCompraFacturaCompra;\r\n    private Persona $proveedor;\r\n\r\n\r\n\r\n    /**\r\n     * @param int|null $id\r\n     * @param Carbon $fecha\r\n     * @param string $monto\r\n     * @param int $proveedor_id\r\n     * @param string $estado\r\n     */\r\n    public function __construct(array $FacturaCompra=[])\r\n    {\r\n        parent::__construct();\r\n       $this->setId ($FacturaCompra['id'] ?? NULL);\r\n       $this->setFecha(!empty($FacturaCompra['fecha'])?\r\n           carbon::parse($FacturaCompra['fecha']) : new carbon());\r\n       $this->setMonto ($FacturaCompra ['monto'] ?? '');\r\n       $this ->setProveedorId($FacturaCompra ['proveedor_id'] ?? 0);\r\n    }\r\n\r\n    public function __destruct()\r\n    {\r\n        parent::__destruct(); // TODO: Change the autogenerated stub\r\n    }\r\n\r\n    /**\r\n     * @return int|null\r\n     */\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    /**\r\n     * @param int|null $id\r\n     */\r\n    public function setId(?int $id): void\r\n    {\r\n        $this->id = $id;\r\n    }\r\n\r\n    /**\r\n     * @return Carbon\r\n     */\r\n    public function getFecha(): Carbon\r\n    {\r\n        return $this->fecha;\r\n    }\r\n\r\n    /**\r\n     * @param Carbon $fecha\r\n     */\r\n    public function setFecha(Carbon $fecha): void\r\n    {\r\n        $this->fecha = $fecha;\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     */\r\n    public function getMonto(): string\r\n    {\r\n        return $this->monto;\r\n    }\r\n\r\n    /**\r\n     * @param string $monto\r\n     */\r\n    public function setMonto(string $monto): void\r\n    {\r\n        $total = 0;\r\n        if($this->getId() != null){\r\n            $arrFacturaCompra = $this->getDetalleCompraFacturaCompra();\r\n            if(!empty($arrFacturaCompraCompra)){\r\n                /* @var $arrFacturaCompra facturacompra[] */\r\n                foreach ($arrFacturaCompra as $DetalleCompra){\r\n                    $total += $DetalleCompra->getTotalProducto();\r\n                }\r\n            }\r\n        }\r\n        $this->monto = $total;\r\n    }\r\n\r\n    /**\r\n     * @return int\r\n     */\r\n    public function getProveedorId(): int\r\n    {\r\n        return $this->proveedor_id;\r\n    }\r\n\r\n    /**\r\n     * @param int $proveedor_id\r\n     */\r\n    public function setProveedorId(int $proveedor_id): void\r\n    {\r\n        $this->proveedor_id = $proveedor_id;\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     */\r\n    public function getEstado(): string\r\n    {\r\n        return $this->estado;\r\n    }\r\n\r\n    /**\r\n     * @param string $estado\r\n     */\r\n    public function setEstado(string $estado): void\r\n    {\r\n        $this->estado = $estado;\r\n    }\r\n\r\n    /* Relaciones */\r\n\r\n    /**\r\n     * @return array|null\r\n     */\r\n    public function getDetalleCompraFacturaCompra(): ?array\r\n    {\r\n\r\n        $this->DetalleCompraFacturaCompra = detallecompra::search('SELECT * FROM ferreteria.detallecompra where compra_id = '.$this->id);\r\n        return $this->detalleCompra;\r\n    }\r\n\r\n    /**\r\n     * @return Persona\r\n     */\r\n    public function getProveedor(): Persona\r\n    {\r\n        if(!empty($this->proveedor_id)){\r\n            $this->proveedor = Persona::searchForId($this->proveedor_id) ??new Persona();\r\n            return $this->proveedor;\r\n        }\r\n        return null;//porqué\r\n    }\r\n\r\n\r\n    protected function save(string $query): ?bool\r\n    {\r\n        $arrData = [\r\n            ':id' =>    $this->getId(),\r\n            ':fecha' =>   $this->getFecha() ->ToDateTimeString(),\r\n            ':monto' =>   $this->getMonto(),\r\n            ':proveedor_id' =>   $this->getProveedorId(),\r\n            ':estado' =>  $this->getEstado()\r\n        ];\r\n        $this->Connect();\r\n        $result = $this->insertRow($query, $arrData);\r\n        $this->Disconnect();\r\n        return $result;\r\n    }\r\n\r\n    function insert(): ?bool\r\n    {\r\n        $query = \"INSERT INTO ferreteria.facturacompra VALUES (:id,:fecha,:monto,:proveedor_id,:estado)\";\r\n        return $this->save($query);\r\n    }\r\n\r\n    function update(): ?bool\r\n    {\r\n        $query = \"UPDATE ferreteria.facturacompra SET \r\n            fecha = :fecha, monto = :monto, \r\n            proveedor_id = :proveedor_id,  estado = :estado WHERE id = :id\";\r\n        return $this->save($query);\r\n    }\r\n\r\n    function deleted(): ?bool\r\n    {\r\n        $this->setEstado(\"Inactivo\"); //Cambia el estado del Usuario\r\n        return $this->update();\r\n    }\r\n\r\n    static function search($query): ?array\r\n    {\r\n        try {\r\n            $arrFacturaCompra = array();\r\n            $tmp = new facturacompra();\r\n            $tmp->Connect();\r\n            $getrows = $tmp->getRows($query);\r\n            $tmp->Disconnect();\r\n\r\n            foreach ($getrows as $valor) {\r\n                $Compra = new facturacompra($valor);\r\n                array_push($arrFacturaCompra, $Compra);\r\n                unset($Compra);\r\n            }\r\n            return $arrFacturaCompra;\r\n        } catch (Exception $e) {\r\n            GeneralFunctions::logFile('Exception',$e, 'error');\r\n        }\r\n        return NULL;\r\n    }\r\n\r\n    static function searchForId(int $id): ?object\r\n    {\r\n        try {\r\n            if ($id > 0) {\r\n                $Compra = new facturacompra();\r\n                $Compra->Connect();\r\n                $getrow = $Compra->getRow(\"SELECT * FROM ferreteria.facturacompra WHERE id =?\", array($id));\r\n                $Compra->Disconnect();\r\n                return ($getrow) ? new facturacompra($getrow) : null;\r\n            }else{\r\n                throw new Exception('Id de compra Invalido');\r\n            }\r\n        } catch (Exception $e) {\r\n            GeneralFunctions::logFile('Exception',$e, 'error');\r\n        }\r\n        return NULL;\r\n    }\r\n\r\n    static function getAll(): ?array\r\n    {\r\n        return facturacompra::search(\"SELECT * FROM ferreteria.facturacompra\");\r\n    }\r\n\r\n    public function __toString() : string\r\n    {\r\n        return \"\r\n        Cliente: \".$this->getProveedor().\",\r\n        Fecha Venta: $this->fecha_compra->toDateTimeString(), \r\n        Monto: $this->monto, \r\n        Estado: $this->estado\";\r\n    }\r\n\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public function jsonSerialize(): mixed\r\n    {\r\n        return [\r\n            'fecha' =>  $this->getFecha()->toDateTimeString(),\r\n            'monto'=> $this ->getMonto(),\r\n            'proveedor'=> $this->getProveedor()->jsonSerialize(),\r\n            'estado'=>$this->getEstado()\r\n        ];\r\n\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Models/facturacompra.php b/app/Models/facturacompra.php
--- a/app/Models/facturacompra.php	
+++ b/app/Models/facturacompra.php	
@@ -155,7 +155,7 @@
             $this->proveedor = Persona::searchForId($this->proveedor_id) ??new Persona();
             return $this->proveedor;
         }
-        return null;//porqué
+        //return null;//porqué
     }
 
 
@@ -179,7 +179,6 @@
         $query = "INSERT INTO ferreteria.facturacompra VALUES (:id,:fecha,:monto,:proveedor_id,:estado)";
         return $this->save($query);
     }
-
     function update(): ?bool
     {
         $query = "UPDATE ferreteria.facturacompra SET 
Index: app/Models/facturaventa.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nnamespace App\\Models;\r\n\r\nuse JetBrains\\PhpStorm\\Internal\\TentativeType;\r\nuse PhpParser\\Node\\Scalar\\String_;\r\nuse Carbon\\Carbon;\r\nuse Exception;\r\nuse JsonSerializable;\r\n\r\nclass facturaventa extends AbstractDBConnection implements \\App\\Interfaces\\Model\r\n{\r\n    private ?int $id;\r\n    private Carbon $fecha;\r\n    private string $monto;\r\n    private ?int $cliente_id;\r\n\r\n    /* Relaciones */\r\n\r\n    Private Persona $PersonaFacturaVenta;\r\n    Private ?array $DetalleVentaFacturaVenta;\r\n\r\n\r\n\r\n    /**\r\n     * factura venta contructor. Recibe un array asociativo\r\n     * @param array $facturaventa\r\n     */\r\n    public function __construct(array $facturaventa = [])\r\n    {\r\n        parent::__contruct();\r\n        $this->setId($facturaventa ['id'] ?? null);\r\n        $this->setFecha(!empty($facturaventa['fecha']) ?\r\n            Carbon::parse($facturaventa['fecha']) : new Carbon());\r\n        $this->setMonto($facturaventa ['monto']?? '');\r\n        $this->setClienteId($facturaventa ['cliente_id'] ?? null);\r\n\r\n\r\n    }\r\n    public function __destruct()\r\n    {\r\n        parent::__destruct();\r\n    }\r\n\r\n    /**\r\n     * @return int|null\r\n     */\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n\r\n    /**\r\n     * @param int|null $id\r\n     */\r\n    public function setId(?int $id): void\r\n    {\r\n        $this->id = $id;\r\n    }\r\n\r\n    /**\r\n     * @return Carbon\r\n     */\r\n    public function getFecha(): Carbon\r\n    {\r\n        return $this->fecha->locale('es');\r\n    }\r\n\r\n    /**\r\n     * @param Carbon $fecha\r\n     */\r\n    public function setFecha(Carbon $fecha): void\r\n    {\r\n        $this->fecha = $fecha;\r\n    }\r\n\r\n    /**\r\n     * @return string\r\n     */\r\n    public function getMonto(): string\r\n    {\r\n        return $this->monto;\r\n    }\r\n\r\n    /**\r\n     * @param string $monto\r\n     */\r\n    public function setMonto(string $monto): void\r\n    {\r\n        $this->monto = $monto;\r\n    }\r\n\r\n    /**\r\n     * @return int|null\r\n     */\r\n    public function getClienteId(): ?int\r\n    {\r\n        return $this->cliente_id;\r\n    }\r\n\r\n    /**\r\n     * @param int|null $cliente_id\r\n     */\r\n    public function setClienteId(?int $cliente_id): void\r\n    {\r\n        $this->cliente_id = $cliente_id;\r\n    }\r\n\r\n\r\n    /**\r\n     * @return int|null\r\n     */\r\n\r\n    /* ----------------Relaciones ----------*/\r\n\r\n    /**\r\n     * @return Persona\r\n     */\r\n    public function getPersonaFacturaVenta():Persona\r\n    {\r\n        if(!empty($this->cliente_id)){\r\n            $this->cliente = Persona::searchForId($this->cliente_id) ?? new cliente();\r\n            return $this->cliente;\r\n        }\r\n       return git status;\r\n    }\r\n\r\n    /**\r\n     * @param Persona $PersonaFacturaVenta\r\n     */\r\n\r\n\r\n    public function setPersonaFacturaVenta(Persona $PersonaFacturaVenta): void\r\n    {\r\n\r\n    }\r\n\r\n    /**\r\n     * @return array|null\r\n     */\r\n    public function getDetalleVentaFacturaVenta(): ?array\r\n    {\r\n        return $this->DetalleVentaFacturaVenta;\r\n    }\r\n\r\n    /**\r\n     * @param array|null $DetalleVentaFacturaVenta\r\n     */\r\n    public function setDetalleVentaFacturaVenta(?array $DetalleVentaFacturaVenta): void\r\n    {\r\n        $this->DetalleVentaFacturaVenta = $DetalleVentaFacturaVenta;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    protected function save(string $query): ?bool\r\n    {\r\n        // TODO: Implement save() method.\r\n    }\r\n\r\n    function insert(): ?bool\r\n    {\r\n        // TODO: Implement insert() method.\r\n    }\r\n\r\n    function update(): ?bool\r\n    {\r\n        // TODO: Implement update() method.\r\n    }\r\n\r\n    function deleted(): ?bool\r\n    {\r\n        // TODO: Implement deleted() method.\r\n    }\r\n\r\n    static function search($query): ?array\r\n    {\r\n        // TODO: Implement search() method.\r\n    }\r\n\r\n    static function searchForId(int $id): ?object\r\n    {\r\n        // TODO: Implement searchForId() method.\r\n    }\r\n\r\n    static function getAll(): ?array\r\n    {\r\n        // TODO: Implement getAll() method.\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public function jsonSerialize(): mixed\r\n    {\r\n        // TODO: Implement jsonSerialize() method.\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Models/facturaventa.php b/app/Models/facturaventa.php
--- a/app/Models/facturaventa.php	
+++ b/app/Models/facturaventa.php	
@@ -14,6 +14,7 @@
     private Carbon $fecha;
     private string $monto;
     private ?int $cliente_id;
+    private string $estado;
 
     /* Relaciones */
 
@@ -22,6 +23,8 @@
 
 
 
+
+
     /**
      * factura venta contructor. Recibe un array asociativo
      * @param array $facturaventa
@@ -34,6 +37,7 @@
             Carbon::parse($facturaventa['fecha']) : new Carbon());
         $this->setMonto($facturaventa ['monto']?? '');
         $this->setClienteId($facturaventa ['cliente_id'] ?? null);
+        $this->setestado($facturaventa ['estado'] ?? '');
 
 
     }
@@ -106,6 +110,22 @@
         $this->cliente_id = $cliente_id;
     }
 
+    /**
+     * @return string
+     */
+    public function getEstado(): string
+    {
+        return $this->estado;
+    }
+
+    /**
+     * @param string $estado
+     */
+    public function setEstado(string $estado): void
+    {
+        $this->estado = $estado;
+    }
+
 
     /**
      * @return int|null
@@ -122,14 +142,13 @@
             $this->cliente = Persona::searchForId($this->cliente_id) ?? new cliente();
             return $this->cliente;
         }
-       return git status;
+       //return Null;
     }
 
     /**
      * @param Persona $PersonaFacturaVenta
      */
 
-
     public function setPersonaFacturaVenta(Persona $PersonaFacturaVenta): void
     {
 
@@ -140,6 +159,7 @@
      */
     public function getDetalleVentaFacturaVenta(): ?array
     {
+        $this->DetalleVentaFacturaVenta = detalleventa::search('SELECT * FROM ferreteria.detalle_venta where facturaventa_id = '.$this->id);
         return $this->DetalleVentaFacturaVenta;
     }
 
@@ -156,45 +176,111 @@
 
 
     protected function save(string $query): ?bool
+
     {
-        // TODO: Implement save() method.
+        $arrData = [
+            ':id' =>    $this->getId(),
+            ':fecha' =>  $this->getFecha()->toDateTimeString(), //YYYY-MM-DD HH:MM:SS
+            ':monto' =>   $this->getMonto(),
+            ':cliente' =>   $this->getCliente_id(),
+            ':estado' => $this->getEstado(),
+
+        ];
+        $this->Connect();
+        $result = $this->insertRow($query, $arrData);
+        $this->Disconnect();
+        return $result;
     }
 
     function insert(): ?bool
     {
-        // TODO: Implement insert() method.
+        $query = "INSERT INTO ferreteria.facturaventa VALUES (:id,:fecha,:monto,:cliente_id,:estado)";
+        return $this->save($query);
     }
 
     function update(): ?bool
     {
-        // TODO: Implement update() method.
+        $query = "UPDATE ferreteria.facturaventa SET 
+            fecha = :fecha,
+            monto = :monto,
+            cliente_id = :cliente_id,
+            estado = :estado, WHERE id = :id";
+           return $this->save($query);
     }
 
     function deleted(): ?bool
     {
-        // TODO: Implement deleted() method.
+        $this->setEstado("inactivo"); //Cambia el estado del Usuario
+        return $this->update();                    //Guarda los cambios..
     }
 
     static function search($query): ?array
     {
-        // TODO: Implement search() method.
+        try {
+            $arrfacturaventa = array();
+            $tmp = new facturaventa();
+            $tmp->Connect();
+            $getrows = $tmp->getRows($query);
+            $tmp->Disconnect();
+
+            foreach ($getrows as $valor) {
+                $arrfacturaventa = new facturaventa($valor);
+                array_push($arrfacturaventa, $arrfacturaventa);
+                unset($arrfacturaventa);
+            }
+            return $arrfacturaventa;
+        } catch (Exception $e) {
+            GeneralFunctions::logFile('Exception',$e, 'error');
+        }
+        return NULL;
     }
 
     static function searchForId(int $id): ?object
     {
-        // TODO: Implement searchForId() method.
+        try {
+            if ($id > 0) {
+                $facturaventa = new facturaventa();
+                $facturaventa->Connect();
+                $getrow = $facturaventa->getRow("SELECT * FROM ferreteria.facturaventa WHERE id =?", array($id));
+                $facturaventa->Disconnect();
+                return ($getrow) ? new facturaventa($getrow) : null;
+            }else{
+                throw new Exception('Id de factura venta Invalido');
+            }
+        } catch (Exception $e) {
+            GeneralFunctions::logFile('Exception',$e, 'error');
+        }
+        return NULL;
     }
 
     static function getAll(): ?array
     {
-        // TODO: Implement getAll() method.
+        return facturaventa::search(query: "SELECT * FROM ferreteria.facturaventa");
     }
 
+    /**
+     * @return string
+
+    public function __toString() : string
+    {
+        return "Numero Serie: $this->numero_serie,
+         Cliente: ".$this->getCliente()->nombresCompletos().",
+         Empleado: ".$this->getEmpleado()->nombresCompletos().",
+         Fecha Venta: $this->fecha_venta->toDateTimeString(),
+          Monto: $this->monto, Estado: $this->estado";
+    }  */
     /**
      * @inheritDoc
      */
     public function jsonSerialize(): mixed
     {
-        // TODO: Implement jsonSerialize() method.
+        return [
+            'fecha' => $this->getFecha()->toDateTimeString(),
+            'empleado' => $this->getEmpleado()->jsonSerialize(),
+            'monto' => $this->getMonto(),
+            'cliente_id' => $this->getClienteId(),
+            'estado' => $this->getEstado(),
+
+        ];
     }
 }
\ No newline at end of file
Index: app/Models/detalleventa.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Models/detalleventa.php b/app/Models/detalleventa.php
new file mode 100644
--- /dev/null	
+++ b/app/Models/detalleventa.php	
@@ -0,0 +1,260 @@
+<?php
+
+namespace App\Models;
+
+use JetBrains\PhpStorm\Internal\TentativeType;
+use PhpParser\Node\Scalar\String_;
+use Carbon\Carbon;
+use Exception;
+use JsonSerializable;
+
+
+class detalleventa extends AbstractDBConnection implements \App\Interfaces\Model
+{
+    private ?int $id;
+    private float $cantidad;
+    private float $valor;
+    private int  $facturaventa_id;
+    private int $medida_id;
+    private int $producto_id;
+
+    /* ------------Relaciones ------------*/
+    Private facturaventa $FacturaVenta;
+    private producto $ProductoVenta;
+    private ?medida $Medida;
+
+
+    public function __construct(array $detalleventa = [])
+    {
+        parent::__contruct();
+        $this->setId($detalleventa ['id'] ?? null);
+        $this->setCantidad($detalleventa ['cantidad']?? 0.0);
+        $this->setValor($detalleventa ['valor']?? 0.0);
+        $this->setFacturaVentaId($detalleventa['facturaventa_id'] ?? null);
+        $this->setMedidaId($detalleventa['medida_id'] ?? null);
+        $this->setProductoId($detalleventa['producto_id'] ?? null);
+
+    }
+    public function __destruct()
+    {
+        parent::__destruct();
+    }
+
+    /**
+     * @return int|null
+     */
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    /**
+     * @param int|null $id
+     */
+    public function setId(?int $id): void
+    {
+        $this->id = $id;
+    }
+
+    /**
+     * @return float
+     */
+    public function getCantidad(): float
+    {
+        return $this->cantidad;
+    }
+
+    /**
+     * @param float $cantidad
+     */
+    public function setCantidad(float $cantidad): void
+    {
+        $this->cantidad = $cantidad;
+    }
+
+    /**
+     * @return float
+     */
+    public function getValor(): float
+    {
+        return $this->valor;
+    }
+
+    /**
+     * @param float $valor
+     */
+    public function setValor(float $valor): void
+    {
+        $this->valor = $valor;
+    }
+
+    /**
+     * @return int
+     */
+    public function getFacturaventaId(): int
+    {
+        return $this->facturaventa_id;
+    }
+
+    /**
+     * @param int $facturaventa_id
+     */
+    public function setFacturaventaId(int $facturaventa_id): void
+    {
+        $this->facturaventa_id = $facturaventa_id;
+    }
+
+    /**
+     * @return int
+     */
+    public function getMedidaId(): int
+    {
+        return $this->medida_id;
+    }
+
+    /**
+     * @param int $medida_id
+     */
+    public function setMedidaId(int $medida_id): void
+    {
+        $this->medida_id = $medida_id;
+    }
+
+    /**
+     * @return int
+     */
+    public function getProductoId(): int
+    {
+        return $this->producto_id;
+    }
+
+    /**
+     * @param int $producto_id
+     */
+    public function setProductoId(int $producto_id): void
+    {
+        $this->producto_id = $producto_id;
+    }
+
+    /* ----------------Relaciones ----------*/
+
+
+    /**
+     * @return facturaventa
+     */
+    public function getFacturaVenta(): facturaventa
+    {
+        if(!empty($this->facturaventa_id)){
+            $this->facturaventa = facturaventa::searchForId($this->facturaventa_id) ?? new facturaventa();
+            return $this->facturaventa;
+        }
+        //return Null;
+    }
+
+
+    /**
+     * @param facturaventa $FacturaVenta
+     */
+    public function setFacturaVenta(facturaventa $FacturaVenta): void
+    {
+        $this->FacturaVenta = $FacturaVenta;
+    }
+
+    /**
+     * @return producto
+     */
+    public function getProductoVenta(): producto
+    {
+        if(!empty($this->productoventa_id)){
+            $this->productoventa = productosventa::searchForId($this->productoventa_id) ?? new Productos();
+            return $this->productoventa;
+        }
+        //return NULL;
+
+    }
+
+    /**
+     * @param producto $ProductoVenta
+     */
+    public function setProductoVenta(producto $ProductoVenta): void
+    {
+        $this->ProductoVenta = $ProductoVenta;
+    }
+
+    /**
+     * @return medida|null
+     */
+    public function getMedida(): ?medida
+    {
+
+    }
+
+    /**
+     * @param medida|null $Medida
+     */
+    public function setMedida(?medida $Medida): void
+    {
+        $this->Medida = $Medida;
+    }
+
+
+
+    protected function save(string $query, string $type = 'insert'): ?bool
+    {
+        if ($type == 'deleted') {
+            $arrData = [':id' => $this->getId()];
+        } else {
+            $arrData = [
+                ':id' => $this->getId(),
+                ':cantidad' => $this->getCantidad(),
+                ':valor' => $this->getValor(),
+                ':facturaventa_id' => $this->getFacturaVenta(),
+                ':medida_id' => $this->getMedida(),
+                ':producto_id' => $this->getProductoId(),
+            ];
+        }
+        $this->Connect();
+        $result = $this->insertRow($query, $arrData);
+        $this->Disconnect();
+        return $result;
+    }
+
+
+    function insert(): ?bool
+    {
+        // TODO: Implement insert() method.
+    }
+
+    function update(): ?bool
+    {
+        // TODO: Implement update() method.
+    }
+
+    function deleted(): ?bool
+    {
+        // TODO: Implement deleted() method.
+    }
+
+    static function search($query): ?array
+    {
+        // TODO: Implement search() method.
+    }
+
+    static function searchForId(int $id): ?object
+    {
+        // TODO: Implement searchForId() method.
+    }
+
+    static function getAll(): ?array
+    {
+        // TODO: Implement getAll() method.
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function jsonSerialize(): mixed
+    {
+        // TODO: Implement jsonSerialize() method.
+    }
+}
\ No newline at end of file
Index: app/Models/marca.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Models/marca.php b/app/Models/marca.php
new file mode 100644
--- /dev/null	
+++ b/app/Models/marca.php	
@@ -0,0 +1,134 @@
+<?php
+
+namespace App\Models;
+
+use JetBrains\PhpStorm\Internal\TentativeType;
+use PhpParser\Node\Scalar\String_;
+use Carbon\Carbon;
+use Exception;
+use JsonSerializable;
+class marca extends AbstractDBConnection implements \App\Interfaces\Model
+{
+private  ?int $id;
+private string $nombre;
+
+/*Relaciones*/
+private ?array$productomarca;
+
+    /**
+     * @param int|null $id
+     * @param string $nombre
+     */
+    public function __construct(array $marca = [])
+    {
+        parent::__contruct();
+        $this->setId($marca ['id'] ?? null);
+        $this->setnombre($marca ['nombre'] ?? '');
+    }
+    public function __destruct()
+    {
+        parent::__destruct();
+    }
+
+    /**
+     * @return int|null
+     */
+    public function getId(): ?int
+    {
+        return $this->id;
+    }
+
+    /**
+     * @param int|null $id
+     */
+    public function setId(?int $id): void
+    {
+        $this->id = $id;
+    }
+
+    /**
+     * @return string
+     */
+    public function getNombre(): string
+    {
+        return $this->nombre;
+    }
+
+    /**
+     * @param string $nombre
+     */
+    public function setNombre(string $nombre): void
+    {
+        $this->nombre = $nombre;
+    }
+     /*relaciones*/
+
+
+    /**
+     * @return array|null
+     */
+    public function getProductomarca(): ?array
+    {
+        if(!empty($this->productomarca_id)){
+            $this->productomarca = Persona::searchForId($this->cliente_id) ?? new cliente();
+            return $this->productomarca;
+        }
+        //return Null;
+
+        return $this->productomarca;
+    }
+
+    /**
+     * @param array|null $productomarca
+     */
+    public function setProductomarca(?array $productomarca): void
+    {
+        $this->productomarca = $productomarca;
+    }
+
+
+
+    protected function save(string $query): ?bool
+    {
+
+        // TODO: Implement save() method.
+    }
+
+    function insert(): ?bool
+    {
+        // TODO: Implement insert() method.
+    }
+
+    function update(): ?bool
+    {
+        // TODO: Implement update() method.
+    }
+
+    function deleted(): ?bool
+    {
+        // TODO: Implement deleted() method.
+    }
+
+    static function search($query): ?array
+    {
+        // TODO: Implement search() method.
+    }
+
+    static function searchForId(int $id): ?object
+    {
+        // TODO: Implement searchForId() method.
+    }
+
+    static function getAll(): ?array
+    {
+        // TODO: Implement getAll() method.
+    }
+
+    /**
+     * @inheritDoc
+     */
+    public function jsonSerialize()
+    {
+        // TODO: Implement jsonSerialize() method.
+    }
+}
\ No newline at end of file
